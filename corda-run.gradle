buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordformation:${corda_gradle_plugins_version}"
    }
}

def RUN_CORDA_GROUP = "corda"

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

def indyConfigMapping = [
        "TreatmentCenter"   : "treatment",
        "Manufacture"       : "issuer",
        "Notary"            : "notary"
]
def cordaNodesDirectory = "$rootDir/build/nodes"
def cordaNodesDirs = indyConfigMapping.collect { "$cordaNodesDirectory/${it.key}" }

task deployNodes(type: net.corda.plugins.Cordform, group: RUN_CORDA_GROUP) {
    dependsOn 'cordapp:jar'
    directory cordaNodesDirectory

    nodeDefaults {
        cordapps = [
                "com.luxoft.poc.supplychain:cordapp:0.1",
                "com.github.${cordentity_provider}.cordentity:cordentity-cordapp:$cordentity_version",
                "com.github.${cordentity_provider}.cordentity:cordentity-cordapp-contracts-states:$cordentity_version"
        ]
        rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
        projectCordapp {
            deploy = false
        }
    }
    
    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10701
        rpcSettings {
            address("localhost:10702")
            adminAddress("localhost:10703")
        }
    }

    node {
        name "O=Manufacture,L=London,C=GB"
        p2pPort 10001
        rpcSettings {
            address("localhost:10002")
            adminAddress("localhost:10003")
        }
    }

    node {
        name "O=TreatmentCenter,L=London,C=GB"
        p2pPort 10101
        rpcSettings {
            address("localhost:10102")
            adminAddress("localhost:10103")
        }
    }
}

cordapp {
    info {
        name "POC Supply Chain"
        vendor "Luxoft"
        targetPlatformVersion 4
        minimumPlatformVersion 4
    }
    
    signing {
        enabled false
    }
}

configurations {
    /** Dependencies that must be deployed into running Corda nodes */
    cordappDeploy
}

task deployCordappToNodes(group: RUN_CORDA_GROUP) {
    doLast {
        for(nodeDir in cordaNodesDirs) {
            copy {
                from('devops/Dockerfile-corda')
                into(nodeDir)
            }
        }
    }
}

task deployGenesisToNodes(group: RUN_CORDA_GROUP) {
    doLast {
        for (nodeDir in cordaNodesDirs) {
            copy {
                from ('cordapp/src/main/resources/genesis')
                into("$nodeDir/genesis")
            }
        }
    }
}

task deployConfigsToNodes(group: RUN_CORDA_GROUP) {
    doLast {
        indyConfigMapping.each { nodeName, configName ->
            def nodeDir = cordaNodesDirs.find { it.contains(nodeName) }

            copy {
                from("config/test/indyconfig")
                into("$nodeDir/indyconfig")
                include("${configName}.properties")
                rename("${configName}.properties", 'indy.properties')
            }
        }
    }
}

task killCordaProcesses(type: Exec, group: RUN_CORDA_GROUP) {
    commandLine "bash", "-c", 'kill `pgrep xterm` && sleep 5; kill -9 `jps | grep "Corda" | cut -d " " -f 1`; true'
}

task deployIndyStuff(group: RUN_CORDA_GROUP) {
    dependsOn deployCordappToNodes
    dependsOn deployConfigsToNodes
    dependsOn deployGenesisToNodes
}

task runNodes(type: Exec, group: RUN_CORDA_GROUP) {
    dependsOn deployIndyStuff

    workingDir "$rootDir/build/nodes"
    executable "./runnodes"
}
